	/* symbol     arrange function          /
 	{ "[]=",	    tile },			              /* Default: Master on left, slaves on right */
	{ "TTT",	    bstack },		              /* Master on top, slaves on bottom */

	{ "[@]",	    spiral },		              /* Fibonacci spiral */
	{ "[\\]",	    dwindle },		            /* Decreasing in size right and leftward */

	{ "H[]",	    deck },			              /* Master on left, slaves in monocle-like mode on right */
 	{ "[M]",	    monocle },		            /* All windows on top of eachother */

	{ "|M|",	    centeredmaster },	        /* Master in middle, slaves on sides */
	{ ">M>",	    centeredfloatingmaster },	/* Same but master floats */

	{ "><>",	    NULL },			              /* no layout function means floating behavior */
	{ NULL,		    NULL },

	TAGKEYS(			XK_1,		0)
	TAGKEYS(			XK_2,		1)
	TAGKEYS(			XK_3,		2)
	TAGKEYS(			XK_4,		3)
	TAGKEYS(			XK_5,		4)
	TAGKEYS(			XK_6,		5)
	TAGKEYS(			XK_7,		6)
	TAGKEYS(			XK_8,		7)
	TAGKEYS(			XK_9,		8)
	{ MODKEY, + 0,		        view,		    {.ui = ~0 } },
	{ MODKEY + Shift, + 0,		tag,		    {.ui = ~0 } },
	{ MODKEY, + minus,	      spawn,		  SHCMD("pamixer --allow-boost -d 5; kill -44 $(pidof dwmblocks)") },
	{ MODKEY + Shift, + minus,spawn,		  SHCMD("pamixer --allow-boost -d 15; kill -44 $(pidof dwmblocks)") },
	{ MODKEY, + equal,	      spawn,		  SHCMD("pamixer --allow-boost -i 5; kill -44 $(pidof dwmblocks)") },
	{ MODKEY + Shift, + equal,spawn,		  SHCMD("pamixer --allow-boost -i 15; kill -44 $(pidof dwmblocks)") },
	{ MODKEY, + BackSpace,	  spawn,		  SHCMD("sysact") },
	{ MODKEY+Shift,+BackSpace,spawn,		  SHCMD("sysact") },

	{ MODKEY, +	Tab,		      view,		    {0} },
	{ MODKEY,	+ q,		        killclient,	{0} },
	{ MODKEY + Shift,	+	q,		spawn,		  SHCMD("sysact") },
	{ MODKEY, + w,		        spawn,		  SHCMD("$BROWSER") },
	{ MODKEY + Shift, + w,		spawn,		  SHCMD("st -e sudo nmtui") },
	{ MODKEY, + e,		        spawn,		  SHCMD("st -e neomutt ; pkill -RTMIN+12 dwmblocks; rmdir ~/.abook") },
	{ MODKEY + Shift, + e,		spawn,		  SHCMD("st -e abook -C ~/.config/abook/abookrc --datafile ~/.config/abook/addressbook") },
	{ MODKEY, + r,		        spawn,		  SHCMD("st -e lf") },
	{ MODKEY + Shift, + r,		spawn,		  SHCMD("st -e htop") },
	{ MODKEY, + t,		        setlayout,	{.v = &layouts[0]} }, /* tile */
	{ MODKEY + Shift, + t,		setlayout,	{.v = &layouts[1]} }, /* bstack */
	{ MODKEY, + y,		        setlayout,	{.v = &layouts[2]} }, /* spiral */
	{ MODKEY + Shift, + y,		setlayout,	{.v = &layouts[3]} }, /* dwindle */
	{ MODKEY, + u,		        setlayout,	{.v = &layouts[4]} }, /* deck */
	{ MODKEY + Shift, + u,		setlayout,	{.v = &layouts[5]} }, /* monocle */
	{ MODKEY, + i,		        setlayout,	{.v = &layouts[6]} }, /* centeredmaster */
	{ MODKEY + Shift, + i,		setlayout,	{.v = &layouts[7]} }, /* centeredfloatingmaster */
	{ MODKEY, + o,		        incnmaster, {.i = +1 } },
	{ MODKEY + Shift, + o,		incnmaster, {.i = -1 } },
	{ MODKEY, + p,			      spawn,		  SHCMD("mpc toggle") },
	{ MODKEY + Shift, + p,		spawn,		  SHCMD("mpc pause ; pauseallmpv") },
	{ MODKEY, + bracketleft,	spawn,		  SHCMD("mpc seek -10") },
	{ MODKEY + Shift, + bracketleft,		  spawn,		SHCMD("mpc seek -60") },
	{ MODKEY, + bracketright,	spawn,		  SHCMD("mpc seek +10") },
	{ MODKEY + Shift,+bracketright,spawn,	SHCMD("mpc seek +60") },
	{ MODKEY, + backslash,		view,		    {0} },
	{ MODKEY + Shift,+backslash,spawn,		SHCMD("") }, */

	{ MODKEY, + a,		        togglegaps,	  {0} },
	{ MODKEY + Shift,	+ a,		defaultgaps,	{0} },
	{ MODKEY, + s,		        togglesticky,	{0} },
	{ MODKEY, + d,		        spawn,        {.v = dmenucmd } },
	{ MODKEY, + f,		        togglefullscr,{0} },
	{ MODKEY + Shift, + f,		setlayout,	  {.v = &layouts[8]} },
	{ MODKEY, + g,		        shiftview,	  { .i = -1 } },
	{ MODKEY + Shift, + g,		shifttag,	    { .i = -1 } },
	{ MODKEY, + h,		        setmfact,	    {.f = -0.05} },
	/* J and K are            automatically bound above in STACKEYS */
	{ MODKEY, + l,		        setmfact,     {.f = +0.05} },
	{ MODKEY, + semicolon,	  shiftview,	  { .i = 1 } },
	{ MODKEY+Shift,+semicolon,shifttag,	    { .i = 1 } },
	{ MODKEY, + apostrophe,	  togglescratch,{.ui = 1} },
	{ MODKEY, + Return,	      spawn,		    {.v = termcmd } },
	{ MODKEY + Shift,+Return,	togglescratch,{.ui = 0} },

	{ MODKEY, + z,		        incrgaps,	    {.i = +3 } },
	{ MODKEY, + x,		        incrgaps,	    {.i = -3 } },
	/* V is                   automatically bound above in STACKKEYS */
	{ MODKEY, + b,		        togglebar,	  {0} },
	{ MODKEY, + n,		        spawn,		    SHCMD("st -e nvim -c VimwikiIndex") },
	{ MODKEY + Shift, + n,		spawn,		    SHCMD("st -e newsboat; pkill -RTMIN+6 dwmblocks") },
	{ MODKEY, + m,		        spawn,		    SHCMD("st -e ncmpcpp") },
	{ MODKEY + Shift, + m,		spawn,		    SHCMD("pamixer -t; kill -44 $(pidof dwmblocks)") },
	{ MODKEY, + comma,	      spawn,		    SHCMD("mpc prev") },
	{ MODKEY + Shift, +comma,	spawn,		    SHCMD("mpc seek 0%") },
	{ MODKEY, + period,	    	spawn,		    SHCMD("mpc next") },
	{ MODKEY + Shift,+period,	spawn,		    SHCMD("mpc repeat") },

	{ MODKEY, + Left,	        focusmon,	    {.i = -1 } },
	{ MODKEY + Shift, +Left,	tagmon,		    {.i = -1 } },
	{ MODKEY, + Right,	      focusmon,	    {.i = +1 } },
	{ MODKEY + Shift, +Right, tagmon,		    {.i = +1 } },

	{ MODKEY, + Page_Up,	    shiftview,	  { .i = -1 } },
	{ MODKEY + Shift,+Page_Up,shifttag,	    { .i = -1 } },
	{ MODKEY, + Page_Down,	  shiftview,	  { .i = +1 } },
	{ MODKEY+Shift,+Page_Down,shifttag,	    { .i = +1 } },
	{ MODKEY, + Insert,	      spawn,		    SHCMD("notify-send \"ðŸ“‹ Clipboard contents:\" \"$(xclip -o -selection clipboard)\"") },

	{ MODKEY, +	F1,		        spawn,		    SHCMD("groff -mom /usr/local/share/dwm/larbs.mom -Tpdf | zathura -") },
	{ MODKEY,	+	F2,		        spawn,		    SHCMD("tutorialvids") },
	{ MODKEY,	+	F3,		        spawn,		    SHCMD("displayselect") },
	{ MODKEY,	+	F4,		        spawn,		    SHCMD("st -e pulsemixer; kill -44 $(pidof dwmblocks)") },
	{ MODKEY,	+	F5,		        xrdb,		      {.v = NULL } },
	{ MODKEY,	+	F6,		        spawn,		    SHCMD("torwrap") },
	{ MODKEY,	+	F7,		        spawn,		    SHCMD("td-toggle") },
	{ MODKEY,	+	F8,		        spawn,		    SHCMD("mailsync") },
	{ MODKEY,	+	F9,		        spawn,		    SHCMD("dmenumount") },
	{ MODKEY,	+	F10,		      spawn,		    SHCMD("dmenuumount") },
	{ MODKEY,	+	F11,		      spawn,		    SHCMD("mpv --no-cache --no-osc --no-input-default-bindings --input-conf=/dev/null --title=webcam $(ls /dev/video[0,2,4,6,8] | tail -n 1)") },
	{ MODKEY,	+	F12,		      xrdb,		      {.v = NULL } },
	{ MODKEY,	+	pace,	        zoom,		      {0} },
	{ MODKEY + Shift,+space,	togglefloating,{0} },

	{ 0,			+ Print,	      spawn,		    SHCMD("maim pic-full-$(date '+%y%m%d-%H%M-%S').png") },
	{ Shift,	+ Print,	      spawn,		    SHCMD("maimpick") },
	{ MODKEY, + Print,	      spawn,		    SHCMD("dmenurecord") },
	{ MODKEY + Shift,	+Print,	spawn,		    SHCMD("dmenurecord kill") },
	{ MODKEY, + Delete,	      spawn,		    SHCMD("dmenurecord kill") },
	{ MODKEY, + Scroll_Lock,	spawn,		    SHCMD("killall screenkey || screenkey &") },

	{ 0, XF86XK_AudioMute,		spawn,		    SHCMD("pamixer -t; kill -44 $(pidof dwmblocks)") },
	{ 0, XF86XK_AudioRaiseVolume,	spawn,		SHCMD("pamixer --allow-boost -i 3; kill -44 $(pidof dwmblocks)") },
	{ 0, XF86XK_AudioLowerVolume,	spawn,		SHCMD("pamixer --allow-boost -d 3; kill -44 $(pidof dwmblocks)") },
	{ 0, XF86XK_AudioPrev,		spawn,		    SHCMD("mpc prev") },
	{ 0, XF86XK_AudioNext,		spawn,		    SHCMD("mpc next") },
	{ 0, XF86XK_AudioPause,		spawn,		    SHCMD("mpc pause") },
	{ 0, XF86XK_AudioPlay,		spawn,		    SHCMD("mpc play") },
	{ 0, XF86XK_AudioStop,		spawn,		    SHCMD("mpc stop") },
	{ 0, XF86XK_AudioRewind,	spawn,		    SHCMD("mpc seek -10") },
	{ 0, XF86XK_AudioForward,	spawn,		    SHCMD("mpc seek +10") },
	{ 0, XF86XK_AudioMedia,		spawn,		    SHCMD("st -e ncmpcpp") },
	{ 0, XF86XK_AudioMicMute,	spawn,		    SHCMD("pactl set-source-mute @DEFAULT_SOURCE@ toggle") },
	{ 0, XF86XK_PowerOff,		  spawn,		    SHCMD("sysact") },
	{ 0, XF86XK_Calculator,		spawn,		    SHCMD("st -e bc -l") },
	{ 0, XF86XK_Sleep,		    spawn,		    SHCMD("sudo -A zzz") },
	{ 0, XF86XK_WWW,		      spawn,		    SHCMD("$BROWSER") },
	{ 0, XF86XK_DOS,		      spawn,		    SHCMD("st") },
	{ 0, XF86XK_ScreenSaver,	spawn,		    SHCMD("slock & xset dpms force off; mpc pause; pauseallmpv") },
	{ 0, XF86XK_TaskPane,		  spawn,		    SHCMD("st -e htop") },
	{ 0, XF86XK_Mail,		      spawn,		    SHCMD("st -e neomutt ; pkill -RTMIN+12 dwmblocks") },
	{ 0, XF86XK_MyComputer,		spawn,		    SHCMD("st -e lf /") },
	{ 0, XF86XK_Launch1,	  	spawn,		    SHCMD("xset dpms force off") },
	{ 0, XF86XK_TouchpadToggle,	spawn,		  SHCMD("(synclient | grep 'TouchpadOff.*1' && synclient TouchpadOff=0) || synclient TouchpadOff=1") },
	{ 0, XF86XK_TouchpadOff,	spawn,		    SHCMD("synclient TouchpadOff=1") },
	{ 0, XF86XK_TouchpadOn,		spawn,		    SHCMD("synclient TouchpadOff=0") },
	{ 0, XF86XK_MonBrightnessUp,spawn,		  SHCMD("xbacklight -inc 15") },
	{ 0, XF86XK_MonBrightnessDown,spawn,		SHCMD("xbacklight -dec 15") },

	/* { MODKEY|Mod4Mask,              XK_h,      incrgaps,       {.i = +1 } }, */
	/* { MODKEY|Mod4Mask,              XK_l,      incrgaps,       {.i = -1 } }, */
	/* { MODKEY|Mod4Mask|ShiftMask,    XK_h,      incrogaps,      {.i = +1 } }, */
	/* { MODKEY|Mod4Mask|ShiftMask,    XK_l,      incrogaps,      {.i = -1 } }, */
	/* { MODKEY|Mod4Mask|ControlMask,  XK_h,      incrigaps,      {.i = +1 } }, */
	/* { MODKEY|Mod4Mask|ControlMask,  XK_l,      incrigaps,      {.i = -1 } }, */
	/* { MODKEY|Mod4Mask|ShiftMask,    XK_0,      defaultgaps,    {0} }, */
	/* { MODKEY,                       XK_y,      incrihgaps,     {.i = +1 } }, */
	/* { MODKEY,                       XK_o,      incrihgaps,     {.i = -1 } }, */
	/* { MODKEY|ControlMask,           XK_y,      incrivgaps,     {.i = +1 } }, */
	/* { MODKEY|ControlMask,           XK_o,      incrivgaps,     {.i = -1 } }, */
	/* { MODKEY|Mod4Mask,              XK_y,      incrohgaps,     {.i = +1 } }, */
	/* { MODKEY|Mod4Mask,              XK_o,      incrohgaps,     {.i = -1 } }, */
	/* { MODKEY|ShiftMask,             XK_y,      incrovgaps,     {.i = +1 } }, */
	/* { MODKEY|ShiftMask,             XK_o,      incrovgaps,     {.i = -1 } }, */

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
#ifndef __OpenBSD__
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button1,        sigdwmblocks,   {.i = 1} },
	{ ClkStatusText,        0,              Button2,        sigdwmblocks,   {.i = 2} },
	{ ClkStatusText,        0,              Button3,        sigdwmblocks,   {.i = 3} },
	{ ClkStatusText,        0,              Button4,        sigdwmblocks,   {.i = 4} },
	{ ClkStatusText,        0,              Button5,        sigdwmblocks,   {.i = 5} },
	{ ClkStatusText,        ShiftMask,      Button1,        sigdwmblocks,   {.i = 6} },
	{ ClkStatusText,        ShiftMask,      Button3,        spawn,          SHCMD("st -e nvim ~/.local/src/dwmblocks/config.h") },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        defaultgaps,	  {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkClientWin,         MODKEY,		      Button4,	      incrgaps,	      {.i = +1} },
	{ ClkClientWin,		      MODKEY,		      Button5,	      incrgaps,	      {.i = -1} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
	{ ClkTagBar,		        0,		          Button4,	      shiftview,	    {.i = -1} },
	{ ClkTagBar,		        0,		          Button5,	      shiftview,	    {.i = 1} },
	{ ClkRootWin,		        0,		          Button2,	      togglebar,	    {0} },
